<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- <mvc:interceptors>
		<mvc:interceptor>
			匹配的是url路径， 如果不配置或/**,将拦截所有的Controller
			<mvc:mapping path="/**"/> 
			<mvc:exclude-mapping path="/user/**"/> 
			<bean class="com.lose.reblog.interceptor.LoginInterceptor" />
		</mvc:interceptor>
		当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法
	</mvc:interceptors> -->

	<!-- 添加注解驱动 -->
	<!-- 个人觉得需要转移到applicationContext -->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />

	<!-- 设置使用注解的类所在的包 -->
	<context:component-scan base-package="com.lose.forum.controller" />

	<!-- Thymeleaf View Resolver - implementation of Spring's ViewResolver interface -->
	<bean id="viewResolver" class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<property name="characterEncoding" value="UTF-8" />
		<!-- <property name="viewNames" value="templates/**,commoms/**,myblogs/**,amazeui/**"/> -->
		<property name="viewNames" value="amazeui/**,common/**" />
	</bean>

	<!-- Thymeleaf Template Engine (Spring4-specific version) -->
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="enableSpringELCompiler" value="true" />
	</bean>

	<!-- Thymeleaf Template Resolver -->
	<bean id="templateResolver"
		class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is set to false (default is true). -->
		<property name="cacheable" value="false" />
		<property name="characterEncoding" value="UTF-8" />
	</bean>



	<!-- Simple strategy: only path extension is taken into account -->
	<bean id="cnManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />

		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="atom" value="application/atom+xml" />
			</map>
		</property>
	</bean>

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>



	<!-- 完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>


	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

</beans>  